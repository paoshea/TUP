// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  fullName  String?
  isActive  Boolean  @default(true)
  lastLogin DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  animals      Animal[]
  evaluations  Evaluation[]    @relation("EvaluatorRelation")
  organizedShows Show[]       @relation("ShowOrganizer")
  showEntries  ShowEntry[]    @relation("EntryOwner")

  @@index([email])
  @@index([isActive])
}

model Animal {
  id        String   @id @default(uuid())
  name      String
  category  String
  breed     String
  region    String
  notes     String?
  images    String[]
  scores    Json     // Stores { movement, conformation, muscleDevelopment, breedCharacteristics }
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  owner       Profile      @relation(fields: [ownerId], references: [id])
  ownerId     String
  evaluations Evaluation[]
  showEntries ShowEntry[] @relation("EntryAnimal")

  @@index([ownerId])
  @@index([breed])
  @@index([region])
  @@index([category])
}

model Show {
  id         String      @id @default(uuid())
  name       String
  date       DateTime
  location   String
  categories Json        // Stores array of { name: string, classes: string[] }
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  // Relations
  organizer   Profile     @relation("ShowOrganizer", fields: [organizerId], references: [id])
  organizerId String
  showEntries ShowEntry[] @relation("ShowEntries")

  @@index([date])
  @@index([location])
  @@index([organizerId])
}

model ShowEntry {
  id          String       @id @default(uuid())
  entryNumber Int
  category    String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  show     Show        @relation("ShowEntries", fields: [showId], references: [id], onDelete: Cascade)
  showId   String
  animal   Animal      @relation("EntryAnimal", fields: [animalId], references: [id])
  animalId String
  owner    Profile     @relation("EntryOwner", fields: [ownerId], references: [id])
  ownerId  String
  showResults ShowResult[]

  @@unique([showId, entryNumber])
  @@index([showId])
  @@index([animalId])
  @@index([ownerId])
}

model ShowResult {
  id        String   @id @default(uuid())
  placement Int
  points    Int
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  showEntry ShowEntry @relation(fields: [showEntryId], references: [id], onDelete: Cascade)
  showEntryId String

  @@index([showEntryId])
}

model Evaluation {
  id        String   @id @default(uuid())
  scores    Json     @db.JsonB // Stores { movement, conformation, muscleDevelopment, breedCharacteristics }
  notes     String?
  metadata  Json?    @db.JsonB // Stores { location, weather, surfaceType, evaluatorNotes }
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  animal     Animal  @relation(fields: [animalId], references: [id])
  animalId   String
  evaluator  Profile @relation("EvaluatorRelation", fields: [evaluatorId], references: [id])
  evaluatorId String

  @@index([animalId])
  @@index([evaluatorId])
  @@index([createdAt(sort: Desc)])
}
